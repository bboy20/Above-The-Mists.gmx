<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ratio = view_hport[0] / view_wport[0];
global.enemyArrIndex = 0;
global.player = instance_find(obj_battleShip, 0);
xAvg = 0;
yAvg = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check(vk_up)){
    view_wview[0] += 10;
    view_hview[0] += 10 * ratio;
}
if(keyboard_check(vk_down)){
    view_wview[0] -= 10;
    view_hview[0] -= 10 * ratio;
}

xSum = 0;
ySum = 0;
for(var i = 0; i &lt; array_length_1d(global.enemyArr); i++){
    xSum += global.enemyArr[i].x;
    ySum += global.enemyArr[i].y;
}
xAvg = xSum/array_length_1d(global.enemyArr);
yAvg = ySum/array_length_1d(global.enemyArr);
xAvg = (xAvg + global.player.x)/2;
yAvg = (yAvg + global.player.y)/2;
view_xview[0] = xAvg - view_wview[0]/2;
view_yview[0] = yAvg - view_hview[0]/2;
//Dynamic Resizing
//Resizing Larger
    if(global.player.x &gt; xAvg + view_wview[0]/2 - 64 || global.player.y &gt; yAvg + view_hview[0]/2 - 64 || global.player.x &lt; xAvg - view_wview[0]/2 + 64 || global.player.y &lt; yAvg - view_hview[0]/2 + 64){
        if(global.player.x &gt; xAvg + view_wview[0]/2 - 32 || global.player.y &gt; yAvg + view_hview[0]/2 - 32 || global.player.x &lt; xAvg - view_wview[0]/2 + 32 || global.player.y &lt; yAvg - view_hview[0]/2 + 32){
            view_wview[0] += 2.5;
            view_hview[0] += 2.5 * ratio;
        }
        view_wview[0] += 2.5;
        view_hview[0] += 2.5 * ratio;
    }
if(view_hview[0] &gt;= 480 &amp;&amp; view_hview[0] &gt;= 640){
    //Resizing Smaller
    if(global.player.x &lt; xAvg + view_wview[0]/2 - 128 &amp;&amp; global.player.x &gt; xAvg - view_wview[0]/2 + 128 &amp;&amp; global.player.y &gt; yAvg - view_hview[0]/2 + 128 &amp;&amp; global.player.y &lt; yAvg + view_hview[0]/2 - 128){
        view_wview[0] -= 2.5;
        view_hview[0] -= 2.5 * ratio;
    }
    view_xview[0] = xAvg - view_wview[0]/2;
    view_yview[0] = yAvg - view_hview[0]/2;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
